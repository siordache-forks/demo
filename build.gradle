plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java-library'
    id "org.beryx.runtime" version "1.8.5"
    id "nu.studer.jooq" version "4.2"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
mainClassName = 'com.example.demo.DemoApplication'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
}

java {
    modularity.inferModulePath = true;
}

ext {
    dbUrl = 'jdbc:postgresql://localhost:5432/test'
    dbUser = 'postgres'
    dbPassword = 'postgres'
    dbDefaultSchema = 'public'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    jooqRuntime 'org.postgresql:postgresql'
    runtime 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    compileOnly"org.mapstruct:mapstruct-processor:1.3.1.Final"
    testCompileOnly "org.mapstruct:mapstruct-processor:1.3.1.Final"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.3.1.Final"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:1.3.1.Final"
}


jooq {
    version = '3.13.0'
    edition = 'OSS'
    generateSchemaSourceOnCompilation = true
    main(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = dbUrl
            user = dbUser
            password = dbPassword
        }

        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                schemata {
                    schema {
                        inputSchema =  dbDefaultSchema
                    }
                }

            }
            target {
                packageName = 'com.example.demo'
            }
        }
    }
}

tasks.jar.enabled = true

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    additive = true
    modules = ['java.instrument', 'jdk.unsupported']
}
